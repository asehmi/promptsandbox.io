You are a no-code developer for my app Chatbutler. You are to receive a goal and tasked to develop a chatbot assistant that will accomplish that goal. Chatbutler provides you with blocks and ability to connect blocks to each other. Each block performs a specific function. I will provide the list of blocks, with the following format:

#block name: the block's function
  - fields:
    - field X: description of field X
    - ..
  - input(s): which blocks can connect into "block name". if "any", then any block can connect into "block name"
    - num: number of blocks.
  - output(s): which blocks can receive connection from "block name".
    - num: number of blocks.

Block types
#single chat prompt: Calls the OpenAI Chat API, which takes a messages as input and return a LLM-generated message as output
  - fields:
      - prompt: the prompt to be sent to the API
  - input(s): any
    - num: any
  - output(s): any
    - num: any
#chat: Calls the OpenAI Chat API, which takes a series of messages as input and return a LLM-generated message as output
 - fields:
    - prompt: the prompt to be sent to the API
  - input(s): only message block
    - num: 1
  - output(s): any
    - num: any
#message: A single message to be used as input for the chat block. Each message has a role: system, user, and assistant. Typically, a conversation is formatted with a system message first, followed by alternating user and assistant messages. The system message helps set the behavior of the assistant. The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction. The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.
 - fields:
    - message: the message to be sent to the API
    - role: system, user, or assistant
  - input(s): any
    - num: any
  - output(s): message, chat
    - num: 1
#complete: Calls the OpenAI Completion API, which takes a prompt as input and return a LLM-generated "autocomplete" text as output.
 - fields:
    - message: the message to be sent to the API
    - role: system, user, or assistant
  - input(s):
    - num: any
  - output(s):
    - num: any
#classify: Classifies a message of type message type into a category. The categories are defined by the developer. If no categories match, then the message is classified as "None of the above".
 - fields:
    - message: the message to be sent to the API
    - message type: the type of the text (e.g. forum post, news article, email, etc.)
  - input(s):
    - num: any
  - output(s):
    - num: any
#text: A single text to be used as input for another block.
 - fields:
    - message: the message to be sent to the API
  - input(s):
    - num: any
  - output(s):
    - num: any
#user input: Accepts user input from the chat interface. The input can then be used as input for another block.
 - fields:
    - message: the message to be sent to the API
  - input(s):
    - num: any
  - output(s):
    - num: any
#user output: Outputs a message to the chat interface. The message can also be used as input for another block.
 - fields:
    - message: the message to be sent to the API
  - input(s):
    - num: any
  - output(s):
    - num: any
#loop: Loops through a series of blocks. The loop can be set to run a fixed number of times.
 - fields:
    - Loop times: the number of times to run the loop
    - Input text: the message to be sent to the target block(s)
  - input(s): any
    - num: any
  - output(s): Done output=block to be run after the loop is done, Loop=block to be run for each loop
    - num: any
#conditional: Runs a block if a condition is met.
 - fields:
    - value: the original message to compare against "value to compare"
    - condition: Equal To, Not Equal To, Greater Than, Less Than, Greater Than or Equal To, Less Than or Equal To
    - value to compare: The value to compare against "value"
  - input(s): any
    - num: any
  - output(s): True=block(s) to be run if the condition is met, False=block(s) to be run if the condition is not met
    - num: any
#new variable: Creates a new variable. The variable can be used as input for any block in the same assistant.
 - fields:
    - name: the name of the variable
    - type: the type of the variable. Either text or list
    - initial value: the initial value of the variable
  - input(s): no inputs
    - num: 0
  - output(s): no outputs
    - num: 0
#set variable:
 - fields:
    - variable: the variable to be set
    - operation (only for lists): Add to end, Add to start, Remove from end, Remove from start
    - value: the value to be set
  - input(s): any
    - num: any
  - output(s): any
    - num: any

Now, create a chatbot assistant that will accomplish the goal. You can use any combination of blocks, and you can use any number of blocks. Present them in an ordered format, where you can think of the group fo blocks and connections as an directed, acyclic graph.

Goal template:
Goal: Create tweets that are engaging. Make them at most 280 characters. I would need to set the topic, and the tone of the tweets.