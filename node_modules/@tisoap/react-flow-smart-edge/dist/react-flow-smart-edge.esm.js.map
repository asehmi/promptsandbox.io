{"version":3,"file":"react-flow-smart-edge.esm.js","sources":["../src/functions/guaranteeWalkablePath.ts","../src/functions/pointConversion.ts","../src/functions/utils.ts","../src/functions/createGrid.ts","../src/functions/drawSvgPath.ts","../src/functions/generatePath.ts","../src/functions/getBoundingBoxes.ts","../src/getSmartEdge/index.ts","../src/SmartEdge/index.tsx","../src/SmartBezierEdge/index.tsx","../src/SmartStepEdge/index.tsx","../src/SmartStraightEdge/index.tsx"],"sourcesContent":["import type { Grid } from 'pathfinding'\nimport type { Position, XYPosition } from 'reactflow'\n\ntype Direction = 'top' | 'bottom' | 'left' | 'right'\n\nexport const getNextPointFromPosition = (\n\tpoint: XYPosition,\n\tposition: Direction\n): XYPosition => {\n\tswitch (position) {\n\t\tcase 'top':\n\t\t\treturn { x: point.x, y: point.y - 1 }\n\t\tcase 'bottom':\n\t\t\treturn { x: point.x, y: point.y + 1 }\n\t\tcase 'left':\n\t\t\treturn { x: point.x - 1, y: point.y }\n\t\tcase 'right':\n\t\t\treturn { x: point.x + 1, y: point.y }\n\t}\n}\n\n/**\n * Guarantee that the path is walkable, even if the point is inside a non\n * walkable area, by adding a walkable path in the direction of the point's\n * Position.\n */\nexport const guaranteeWalkablePath = (\n\tgrid: Grid,\n\tpoint: XYPosition,\n\tposition: Position\n) => {\n\tlet node = grid.getNodeAt(point.x, point.y)\n\twhile (!node.walkable) {\n\t\tgrid.setWalkableAt(node.x, node.y, true)\n\t\tconst next = getNextPointFromPosition(node, position)\n\t\tnode = grid.getNodeAt(next.x, next.y)\n\t}\n}\n","import type { XYPosition } from 'reactflow'\n\n/**\n * Each bounding box is a collection of X/Y points in a graph, and we\n * need to convert them to \"occupied\" cells in a 2D grid representation.\n *\n * The top most position of the grid (grid[0][0]) needs to be equivalent\n * to the top most point in the graph (the graph.topLeft point).\n *\n * Since the top most point can have X/Y values different than zero,\n * and each cell in a grid represents a 10x10 pixel area in the grid (or a\n * gridRatio area), there's need to be a conversion between a point in a graph\n * to a point in the grid.\n *\n * We do this conversion by dividing a graph point X/Y values by the grid ratio,\n * and \"shifting\" their values up or down, depending on the values of the top\n * most point in the graph. The top most point in the graph will have the\n * smallest values for X and Y.\n *\n * We avoid setting nodes in the border of the grid (x=0 or y=0), so there's\n * always a \"walkable\" area around the grid.\n */\nexport const graphToGridPoint = (\n\tgraphPoint: XYPosition,\n\tsmallestX: number,\n\tsmallestY: number,\n\tgridRatio: number\n): XYPosition => {\n\tlet x = graphPoint.x / gridRatio\n\tlet y = graphPoint.y / gridRatio\n\n\tlet referenceX = smallestX / gridRatio\n\tlet referenceY = smallestY / gridRatio\n\n\tif (referenceX < 1) {\n\t\twhile (referenceX !== 1) {\n\t\t\treferenceX++\n\t\t\tx++\n\t\t}\n\t} else if (referenceX > 1) {\n\t\twhile (referenceX !== 1) {\n\t\t\treferenceX--\n\t\t\tx--\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\tif (referenceY < 1) {\n\t\twhile (referenceY !== 1) {\n\t\t\treferenceY++\n\t\t\ty++\n\t\t}\n\t} else if (referenceY > 1) {\n\t\twhile (referenceY !== 1) {\n\t\t\treferenceY--\n\t\t\ty--\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\treturn { x, y }\n}\n\n/**\n * Converts a grid point back to a graph point, using the reverse logic of\n * graphToGridPoint.\n */\nexport const gridToGraphPoint = (\n\tgridPoint: XYPosition,\n\tsmallestX: number,\n\tsmallestY: number,\n\tgridRatio: number\n): XYPosition => {\n\tlet x = gridPoint.x * gridRatio\n\tlet y = gridPoint.y * gridRatio\n\n\tlet referenceX = smallestX\n\tlet referenceY = smallestY\n\n\tif (referenceX < gridRatio) {\n\t\twhile (referenceX !== gridRatio) {\n\t\t\treferenceX = referenceX + gridRatio\n\t\t\tx = x - gridRatio\n\t\t}\n\t} else if (referenceX > gridRatio) {\n\t\twhile (referenceX !== gridRatio) {\n\t\t\treferenceX = referenceX - gridRatio\n\t\t\tx = x + gridRatio\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\tif (referenceY < gridRatio) {\n\t\twhile (referenceY !== gridRatio) {\n\t\t\treferenceY = referenceY + gridRatio\n\t\t\ty = y - gridRatio\n\t\t}\n\t} else if (referenceY > gridRatio) {\n\t\twhile (referenceY !== gridRatio) {\n\t\t\treferenceY = referenceY - gridRatio\n\t\t\ty = y + gridRatio\n\t\t}\n\t} else {\n\t\t// Nothing to do\n\t}\n\n\treturn { x, y }\n}\n","export const round = (x: number, multiple = 10) =>\n\tMath.round(x / multiple) * multiple\n\nexport const roundDown = (x: number, multiple = 10) =>\n\tMath.floor(x / multiple) * multiple\n\nexport const roundUp = (x: number, multiple = 10) =>\n\tMath.ceil(x / multiple) * multiple\n\nexport const toInteger = (value: number, min = 0) => {\n\tlet result = Math.max(Math.round(value), min)\n\tresult = Number.isInteger(result) ? result : min\n\tresult = result >= min ? result : min\n\treturn result\n}\n","import { Grid } from 'pathfinding'\nimport {\n\tguaranteeWalkablePath,\n\tgetNextPointFromPosition\n} from './guaranteeWalkablePath'\nimport { graphToGridPoint } from './pointConversion'\nimport { round, roundUp } from './utils'\nimport type { NodeBoundingBox, GraphBoundingBox } from './getBoundingBoxes'\nimport type { Position } from 'reactflow'\n\nexport type PointInfo = {\n\tx: number\n\ty: number\n\tposition: Position\n}\n\nexport const createGrid = (\n\tgraph: GraphBoundingBox,\n\tnodes: NodeBoundingBox[],\n\tsource: PointInfo,\n\ttarget: PointInfo,\n\tgridRatio = 2\n) => {\n\tconst { xMin, yMin, width, height } = graph\n\n\t// Create a grid representation of the graph box, where each cell is\n\t// equivalent to 10x10 pixels (or the grid ratio) on the graph. We'll use\n\t// this simplified grid to do pathfinding.\n\tconst mapColumns = roundUp(width, gridRatio) / gridRatio + 1\n\tconst mapRows = roundUp(height, gridRatio) / gridRatio + 1\n\tconst grid = new Grid(mapColumns, mapRows)\n\n\t// Update the grid representation with the space the nodes take up\n\tnodes.forEach((node) => {\n\t\tconst nodeStart = graphToGridPoint(node.topLeft, xMin, yMin, gridRatio)\n\t\tconst nodeEnd = graphToGridPoint(node.bottomRight, xMin, yMin, gridRatio)\n\n\t\tfor (let x = nodeStart.x; x < nodeEnd.x; x++) {\n\t\t\tfor (let y = nodeStart.y; y < nodeEnd.y; y++) {\n\t\t\t\tgrid.setWalkableAt(x, y, false)\n\t\t\t}\n\t\t}\n\t})\n\n\t// Convert the starting and ending graph points to grid points\n\tconst startGrid = graphToGridPoint(\n\t\t{\n\t\t\tx: round(source.x, gridRatio),\n\t\t\ty: round(source.y, gridRatio)\n\t\t},\n\t\txMin,\n\t\tyMin,\n\t\tgridRatio\n\t)\n\n\tconst endGrid = graphToGridPoint(\n\t\t{\n\t\t\tx: round(target.x, gridRatio),\n\t\t\ty: round(target.y, gridRatio)\n\t\t},\n\t\txMin,\n\t\tyMin,\n\t\tgridRatio\n\t)\n\n\t// Guarantee a walkable path between the start and end points, even if the\n\t// source or target where covered by another node or by padding\n\tconst startingNode = grid.getNodeAt(startGrid.x, startGrid.y)\n\tguaranteeWalkablePath(grid, startingNode, source.position)\n\tconst endingNode = grid.getNodeAt(endGrid.x, endGrid.y)\n\tguaranteeWalkablePath(grid, endingNode, target.position)\n\n\t// Use the next closest points as the start and end points, so\n\t// pathfinding does not start too close to the nodes\n\tconst start = getNextPointFromPosition(startingNode, source.position)\n\tconst end = getNextPointFromPosition(endingNode, target.position)\n\n\treturn { grid, start, end }\n}\n","import type { XYPosition } from 'reactflow'\n\n/**\n * Takes source and target {x, y} points, together with an array of number\n * tuples [x, y] representing the points along the path, and returns a string\n * to be used as the SVG path.\n */\nexport type SVGDrawFunction = (\n\tsource: XYPosition,\n\ttarget: XYPosition,\n\tpath: number[][]\n) => string\n\n/**\n * Draws a SVG path from a list of points, using straight lines.\n */\nexport const svgDrawStraightLinePath: SVGDrawFunction = (\n\tsource,\n\ttarget,\n\tpath\n) => {\n\tlet svgPathString = `M ${source.x}, ${source.y} `\n\n\tpath.forEach((point) => {\n\t\tconst [x, y] = point\n\t\tsvgPathString += `L ${x}, ${y} `\n\t})\n\n\tsvgPathString += `L ${target.x}, ${target.y} `\n\n\treturn svgPathString\n}\n\n/**\n * Draws a SVG path from a list of points, using rounded lines.\n */\nexport const svgDrawSmoothLinePath: SVGDrawFunction = (\n\tsource,\n\ttarget,\n\tpath\n) => {\n\tconst points = [[source.x, source.y], ...path, [target.x, target.y]]\n\treturn quadraticBezierCurve(points)\n}\n\nconst quadraticBezierCurve = (points: number[][]) => {\n\tconst X = 0\n\tconst Y = 1\n\tlet point = points[0]\n\n\tconst first = points[0]\n\tlet svgPath = `M${first[X]},${first[Y]}M`\n\n\tfor (let i = 0; i < points.length; i++) {\n\t\tconst next = points[i]\n\t\tconst midPoint = getMidPoint(point[X], point[Y], next[X], next[Y])\n\n\t\tsvgPath += ` ${midPoint[X]},${midPoint[Y]}`\n\t\tsvgPath += `Q${next[X]},${next[Y]}`\n\t\tpoint = next\n\t}\n\n\tconst last = points[points.length - 1]\n\tsvgPath += ` ${last[0]},${last[1]}`\n\n\treturn svgPath\n}\n\nconst getMidPoint = (Ax: number, Ay: number, Bx: number, By: number) => {\n\tconst Zx = (Ax - Bx) / 2 + Bx\n\tconst Zy = (Ay - By) / 2 + By\n\treturn [Zx, Zy]\n}\n","// FIXME: The \"pathfinding\" module doe not have proper typings.\n/* eslint-disable\n\t@typescript-eslint/no-unsafe-call,\n\t@typescript-eslint/no-unsafe-member-access,\n\t@typescript-eslint/no-unsafe-assignment,\n\t@typescript-eslint/ban-ts-comment,\n*/\nimport {\n\tAStarFinder,\n\tJumpPointFinder,\n\tUtil,\n\tDiagonalMovement\n} from 'pathfinding'\nimport type { Grid } from 'pathfinding'\nimport type { XYPosition } from 'reactflow'\n\n/**\n * Takes source and target {x, y} points, together with an grid representation\n * of the graph, and returns two arrays of number tuples [x, y]. The first\n * array represents the full path from source to target, and the second array\n * represents a condensed path from source to target.\n */\nexport type PathFindingFunction = (\n\tgrid: Grid,\n\tstart: XYPosition,\n\tend: XYPosition\n) => {\n\tfullPath: number[][]\n\tsmoothedPath: number[][]\n} | null\n\nexport const pathfindingAStarDiagonal: PathFindingFunction = (\n\tgrid,\n\tstart,\n\tend\n) => {\n\ttry {\n\t\tconst finder = new AStarFinder({\n\t\t\tdiagonalMovement: DiagonalMovement.Always\n\t\t})\n\t\tconst fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid)\n\t\tconst smoothedPath = Util.smoothenPath(grid, fullPath)\n\t\tif (fullPath.length === 0 || smoothedPath.length === 0) return null\n\t\treturn { fullPath, smoothedPath }\n\t} catch {\n\t\treturn null\n\t}\n}\n\nexport const pathfindingAStarNoDiagonal: PathFindingFunction = (\n\tgrid,\n\tstart,\n\tend\n) => {\n\ttry {\n\t\tconst finder = new AStarFinder({\n\t\t\tdiagonalMovement: DiagonalMovement.Never\n\t\t})\n\t\tconst fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid)\n\t\tconst smoothedPath = Util.smoothenPath(grid, fullPath)\n\t\tif (fullPath.length === 0 || smoothedPath.length === 0) return null\n\t\treturn { fullPath, smoothedPath }\n\t} catch {\n\t\treturn null\n\t}\n}\n\nexport const pathfindingJumpPointNoDiagonal: PathFindingFunction = (\n\tgrid,\n\tstart,\n\tend\n) => {\n\ttry {\n\t\t// FIXME: The \"pathfinding\" module doe not have proper typings.\n\t\t// @ts-ignore\n\t\tconst finder = new JumpPointFinder({\n\t\t\tdiagonalMovement: DiagonalMovement.Never\n\t\t})\n\t\tconst fullPath = finder.findPath(start.x, start.y, end.x, end.y, grid)\n\t\tconst smoothedPath = fullPath\n\t\tif (fullPath.length === 0 || smoothedPath.length === 0) return null\n\t\treturn { fullPath, smoothedPath }\n\t} catch {\n\t\treturn null\n\t}\n}\n","import { roundUp, roundDown } from './utils'\nimport type { Node, XYPosition } from 'reactflow'\n\nexport type NodeBoundingBox = {\n\tid: string\n\twidth: number\n\theight: number\n\ttopLeft: XYPosition\n\tbottomLeft: XYPosition\n\ttopRight: XYPosition\n\tbottomRight: XYPosition\n}\n\nexport type GraphBoundingBox = {\n\twidth: number\n\theight: number\n\ttopLeft: XYPosition\n\tbottomLeft: XYPosition\n\ttopRight: XYPosition\n\tbottomRight: XYPosition\n\txMax: number\n\tyMax: number\n\txMin: number\n\tyMin: number\n}\n\n/**\n * Get the bounding box of all nodes and the graph itself, as X/Y coordinates\n * of all corner points.\n *\n * @param nodes The node list\n * @param nodePadding Optional padding to add to the node's and graph bounding boxes\n * @param roundTo Everything will be rounded to this nearest integer\n * @returns Graph and nodes bounding boxes.\n */\nexport const getBoundingBoxes = <NodeDataType = unknown>(\n\tnodes: Node<NodeDataType>[],\n\tnodePadding = 2,\n\troundTo = 2\n) => {\n\tlet xMax = Number.MIN_SAFE_INTEGER\n\tlet yMax = Number.MIN_SAFE_INTEGER\n\tlet xMin = Number.MAX_SAFE_INTEGER\n\tlet yMin = Number.MAX_SAFE_INTEGER\n\n\tconst nodeBoxes: NodeBoundingBox[] = nodes.map((node) => {\n\t\tconst width = Math.max(node.width || 0, 1)\n\t\tconst height = Math.max(node.height || 0, 1)\n\n\t\tconst position: XYPosition = {\n\t\t\tx: node.positionAbsolute?.x || 0,\n\t\t\ty: node.positionAbsolute?.y || 0\n\t\t}\n\n\t\tconst topLeft: XYPosition = {\n\t\t\tx: position.x - nodePadding,\n\t\t\ty: position.y - nodePadding\n\t\t}\n\t\tconst bottomLeft: XYPosition = {\n\t\t\tx: position.x - nodePadding,\n\t\t\ty: position.y + height + nodePadding\n\t\t}\n\t\tconst topRight: XYPosition = {\n\t\t\tx: position.x + width + nodePadding,\n\t\t\ty: position.y - nodePadding\n\t\t}\n\t\tconst bottomRight: XYPosition = {\n\t\t\tx: position.x + width + nodePadding,\n\t\t\ty: position.y + height + nodePadding\n\t\t}\n\n\t\tif (roundTo > 0) {\n\t\t\ttopLeft.x = roundDown(topLeft.x, roundTo)\n\t\t\ttopLeft.y = roundDown(topLeft.y, roundTo)\n\t\t\tbottomLeft.x = roundDown(bottomLeft.x, roundTo)\n\t\t\tbottomLeft.y = roundUp(bottomLeft.y, roundTo)\n\t\t\ttopRight.x = roundUp(topRight.x, roundTo)\n\t\t\ttopRight.y = roundDown(topRight.y, roundTo)\n\t\t\tbottomRight.x = roundUp(bottomRight.x, roundTo)\n\t\t\tbottomRight.y = roundUp(bottomRight.y, roundTo)\n\t\t}\n\n\t\tif (topLeft.y < yMin) yMin = topLeft.y\n\t\tif (topLeft.x < xMin) xMin = topLeft.x\n\t\tif (bottomRight.y > yMax) yMax = bottomRight.y\n\t\tif (bottomRight.x > xMax) xMax = bottomRight.x\n\n\t\treturn {\n\t\t\tid: node.id,\n\t\t\twidth,\n\t\t\theight,\n\t\t\ttopLeft,\n\t\t\tbottomLeft,\n\t\t\ttopRight,\n\t\t\tbottomRight\n\t\t}\n\t})\n\n\tconst graphPadding = nodePadding * 2\n\n\txMax = roundUp(xMax + graphPadding, roundTo)\n\tyMax = roundUp(yMax + graphPadding, roundTo)\n\txMin = roundDown(xMin - graphPadding, roundTo)\n\tyMin = roundDown(yMin - graphPadding, roundTo)\n\n\tconst topLeft: XYPosition = {\n\t\tx: xMin,\n\t\ty: yMin\n\t}\n\n\tconst bottomLeft: XYPosition = {\n\t\tx: xMin,\n\t\ty: yMax\n\t}\n\n\tconst topRight: XYPosition = {\n\t\tx: xMax,\n\t\ty: yMin\n\t}\n\n\tconst bottomRight: XYPosition = {\n\t\tx: xMax,\n\t\ty: yMax\n\t}\n\n\tconst width = Math.abs(topLeft.x - topRight.x)\n\tconst height = Math.abs(topLeft.y - bottomLeft.y)\n\n\tconst graphBox: GraphBoundingBox = {\n\t\ttopLeft,\n\t\tbottomLeft,\n\t\ttopRight,\n\t\tbottomRight,\n\t\twidth,\n\t\theight,\n\t\txMax,\n\t\tyMax,\n\t\txMin,\n\t\tyMin\n\t}\n\n\treturn { nodeBoxes, graphBox }\n}\n","import {\n\tcreateGrid,\n\tgetBoundingBoxes,\n\tgridToGraphPoint,\n\tpathfindingAStarDiagonal,\n\tsvgDrawSmoothLinePath,\n\ttoInteger\n} from '../functions'\nimport type {\n\tPointInfo,\n\tPathFindingFunction,\n\tSVGDrawFunction\n} from '../functions'\nimport type { Node, EdgeProps } from 'reactflow'\n\nexport type EdgeParams = Pick<\n\tEdgeProps,\n\t| 'sourceX'\n\t| 'sourceY'\n\t| 'targetX'\n\t| 'targetY'\n\t| 'sourcePosition'\n\t| 'targetPosition'\n>\n\nexport type GetSmartEdgeOptions = {\n\tgridRatio?: number\n\tnodePadding?: number\n\tdrawEdge?: SVGDrawFunction\n\tgeneratePath?: PathFindingFunction\n}\n\nexport type GetSmartEdgeParams<NodeDataType = unknown> = EdgeParams & {\n\toptions?: GetSmartEdgeOptions\n\tnodes: Node<NodeDataType>[]\n}\n\nexport type GetSmartEdgeReturn = {\n\tsvgPathString: string\n\tedgeCenterX: number\n\tedgeCenterY: number\n}\n\nexport const getSmartEdge = <NodeDataType = unknown>({\n\toptions = {},\n\tnodes = [],\n\tsourceX,\n\tsourceY,\n\ttargetX,\n\ttargetY,\n\tsourcePosition,\n\ttargetPosition\n}: GetSmartEdgeParams<NodeDataType>): GetSmartEdgeReturn | null => {\n\ttry {\n\t\tconst {\n\t\t\tdrawEdge = svgDrawSmoothLinePath,\n\t\t\tgeneratePath = pathfindingAStarDiagonal\n\t\t} = options\n\n\t\tlet { gridRatio = 10, nodePadding = 10 } = options\n\t\tgridRatio = toInteger(gridRatio)\n\t\tnodePadding = toInteger(nodePadding)\n\n\t\t// We use the node's information to generate bounding boxes for them\n\t\t// and the graph\n\t\tconst { graphBox, nodeBoxes } = getBoundingBoxes<NodeDataType>(\n\t\t\tnodes,\n\t\t\tnodePadding,\n\t\t\tgridRatio\n\t\t)\n\n\t\tconst source: PointInfo = {\n\t\t\tx: sourceX,\n\t\t\ty: sourceY,\n\t\t\tposition: sourcePosition\n\t\t}\n\n\t\tconst target: PointInfo = {\n\t\t\tx: targetX,\n\t\t\ty: targetY,\n\t\t\tposition: targetPosition\n\t\t}\n\n\t\t// With this information, we can create a 2D grid representation of\n\t\t// our graph, that tells us where in the graph there is a \"free\" space or not\n\t\tconst { grid, start, end } = createGrid(\n\t\t\tgraphBox,\n\t\t\tnodeBoxes,\n\t\t\tsource,\n\t\t\ttarget,\n\t\t\tgridRatio\n\t\t)\n\n\t\t// We then can use the grid representation to do pathfinding\n\t\tconst generatePathResult = generatePath(grid, start, end)\n\n\t\tif (generatePathResult === null) {\n\t\t\treturn null\n\t\t}\n\n\t\tconst { fullPath, smoothedPath } = generatePathResult\n\n\t\t// Here we convert the grid path to a sequence of graph coordinates.\n\t\tconst graphPath = smoothedPath.map((gridPoint) => {\n\t\t\tconst [x, y] = gridPoint\n\t\t\tconst graphPoint = gridToGraphPoint(\n\t\t\t\t{ x, y },\n\t\t\t\tgraphBox.xMin,\n\t\t\t\tgraphBox.yMin,\n\t\t\t\tgridRatio\n\t\t\t)\n\t\t\treturn [graphPoint.x, graphPoint.y]\n\t\t})\n\n\t\t// Finally, we can use the graph path to draw the edge\n\t\tconst svgPathString = drawEdge(source, target, graphPath)\n\n\t\t// Compute the edge's middle point using the full path, so users can use\n\t\t// it to position their custom labels\n\t\tconst index = Math.floor(fullPath.length / 2)\n\t\tconst middlePoint = fullPath[index]\n\t\tconst [middleX, middleY] = middlePoint\n\t\tconst { x: edgeCenterX, y: edgeCenterY } = gridToGraphPoint(\n\t\t\t{ x: middleX, y: middleY },\n\t\t\tgraphBox.xMin,\n\t\t\tgraphBox.yMin,\n\t\t\tgridRatio\n\t\t)\n\n\t\treturn { svgPathString, edgeCenterX, edgeCenterY }\n\t} catch {\n\t\treturn null\n\t}\n}\n\nexport type GetSmartEdgeFunction = typeof getSmartEdge\n","import React from 'react'\nimport { BezierEdge, BaseEdge } from 'reactflow'\nimport { getSmartEdge } from '../getSmartEdge'\nimport type { GetSmartEdgeOptions } from '../getSmartEdge'\nimport type { EdgeProps, Node } from 'reactflow'\n\nexport type EdgeElement = typeof BezierEdge\n\nexport type SmartEdgeOptions = GetSmartEdgeOptions & {\n\tfallback?: EdgeElement\n}\n\nexport interface SmartEdgeProps<EdgeDataType = unknown, NodeDataType = unknown>\n\textends EdgeProps<EdgeDataType> {\n\tnodes: Node<NodeDataType>[]\n\toptions: SmartEdgeOptions\n}\n\nexport function SmartEdge<EdgeDataType = unknown, NodeDataType = unknown>({\n\tnodes,\n\toptions,\n\t...edgeProps\n}: SmartEdgeProps<EdgeDataType, NodeDataType>) {\n\tconst {\n\t\tsourceX,\n\t\tsourceY,\n\t\tsourcePosition,\n\t\ttargetX,\n\t\ttargetY,\n\t\ttargetPosition,\n\t\tstyle,\n\t\tlabel,\n\t\tlabelStyle,\n\t\tlabelShowBg,\n\t\tlabelBgStyle,\n\t\tlabelBgPadding,\n\t\tlabelBgBorderRadius,\n\t\tmarkerEnd,\n\t\tmarkerStart,\n\t\tinteractionWidth\n\t} = edgeProps\n\n\tconst smartResponse = getSmartEdge({\n\t\tsourcePosition,\n\t\ttargetPosition,\n\t\tsourceX,\n\t\tsourceY,\n\t\ttargetX,\n\t\ttargetY,\n\t\toptions,\n\t\tnodes\n\t})\n\n\tconst FallbackEdge = options.fallback || BezierEdge\n\n\tif (smartResponse === null) {\n\t\treturn <FallbackEdge {...edgeProps} />\n\t}\n\n\tconst { edgeCenterX, edgeCenterY, svgPathString } = smartResponse\n\n\treturn (\n\t\t<BaseEdge\n\t\t\tpath={svgPathString}\n\t\t\tlabelX={edgeCenterX}\n\t\t\tlabelY={edgeCenterY}\n\t\t\tlabel={label}\n\t\t\tlabelStyle={labelStyle}\n\t\t\tlabelShowBg={labelShowBg}\n\t\t\tlabelBgStyle={labelBgStyle}\n\t\t\tlabelBgPadding={labelBgPadding}\n\t\t\tlabelBgBorderRadius={labelBgBorderRadius}\n\t\t\tstyle={style}\n\t\t\tmarkerStart={markerStart}\n\t\t\tmarkerEnd={markerEnd}\n\t\t\tinteractionWidth={interactionWidth}\n\t\t/>\n\t)\n}\n\nexport type SmartEdgeFunction = typeof SmartEdge\n","import React from 'react'\nimport { useNodes, BezierEdge } from 'reactflow'\nimport { SmartEdge } from '../SmartEdge'\nimport { svgDrawSmoothLinePath, pathfindingAStarDiagonal } from '../functions'\nimport type { SmartEdgeOptions } from '../SmartEdge'\nimport type { EdgeProps } from 'reactflow'\n\nconst BezierConfiguration: SmartEdgeOptions = {\n\tdrawEdge: svgDrawSmoothLinePath,\n\tgeneratePath: pathfindingAStarDiagonal,\n\tfallback: BezierEdge\n}\n\nexport function SmartBezierEdge<EdgeDataType = unknown, NodeDataType = unknown>(\n\tprops: EdgeProps<EdgeDataType>\n) {\n\tconst nodes = useNodes<NodeDataType>()\n\n\treturn (\n\t\t<SmartEdge<EdgeDataType, NodeDataType>\n\t\t\t{...props}\n\t\t\toptions={BezierConfiguration}\n\t\t\tnodes={nodes}\n\t\t/>\n\t)\n}\n","import React from 'react'\nimport { useNodes, StepEdge } from 'reactflow'\nimport { SmartEdge } from '../SmartEdge'\nimport {\n\tsvgDrawStraightLinePath,\n\tpathfindingJumpPointNoDiagonal\n} from '../functions'\nimport type { SmartEdgeOptions } from '../SmartEdge'\nimport type { EdgeProps } from 'reactflow'\n\nconst StepConfiguration: SmartEdgeOptions = {\n\tdrawEdge: svgDrawStraightLinePath,\n\tgeneratePath: pathfindingJumpPointNoDiagonal,\n\tfallback: StepEdge\n}\n\nexport function SmartStepEdge<EdgeDataType = unknown, NodeDataType = unknown>(\n\tprops: EdgeProps<EdgeDataType>\n) {\n\tconst nodes = useNodes<NodeDataType>()\n\n\treturn (\n\t\t<SmartEdge<EdgeDataType, NodeDataType>\n\t\t\t{...props}\n\t\t\toptions={StepConfiguration}\n\t\t\tnodes={nodes}\n\t\t/>\n\t)\n}\n","import React from 'react'\nimport { useNodes, StraightEdge } from 'reactflow'\nimport { SmartEdge } from '../SmartEdge'\nimport {\n\tsvgDrawStraightLinePath,\n\tpathfindingAStarNoDiagonal\n} from '../functions'\nimport type { SmartEdgeOptions } from '../SmartEdge'\nimport type { EdgeProps } from 'reactflow'\n\nconst StraightConfiguration: SmartEdgeOptions = {\n\tdrawEdge: svgDrawStraightLinePath,\n\tgeneratePath: pathfindingAStarNoDiagonal,\n\tfallback: StraightEdge\n}\n\nexport function SmartStraightEdge<\n\tEdgeDataType = unknown,\n\tNodeDataType = unknown\n>(props: EdgeProps<EdgeDataType>) {\n\tconst nodes = useNodes<NodeDataType>()\n\n\treturn (\n\t\t<SmartEdge<EdgeDataType, NodeDataType>\n\t\t\t{...props}\n\t\t\toptions={StraightConfiguration}\n\t\t\tnodes={nodes}\n\t\t/>\n\t)\n}\n"],"names":["getNextPointFromPosition","point","position","x","y","guaranteeWalkablePath","grid","node","getNodeAt","walkable","setWalkableAt","next","graphToGridPoint","graphPoint","smallestX","smallestY","gridRatio","referenceX","referenceY","gridToGraphPoint","gridPoint","round","multiple","Math","roundDown","floor","roundUp","ceil","toInteger","value","min","result","max","Number","isInteger","createGrid","graph","nodes","source","target","xMin","yMin","width","height","mapColumns","mapRows","Grid","forEach","nodeStart","topLeft","nodeEnd","bottomRight","startGrid","endGrid","startingNode","endingNode","start","end","svgDrawStraightLinePath","path","svgPathString","svgDrawSmoothLinePath","points","quadraticBezierCurve","X","Y","first","svgPath","i","length","midPoint","getMidPoint","last","Ax","Ay","Bx","By","Zx","Zy","pathfindingAStarDiagonal","finder","AStarFinder","diagonalMovement","DiagonalMovement","Always","fullPath","findPath","smoothedPath","Util","smoothenPath","pathfindingAStarNoDiagonal","Never","pathfindingJumpPointNoDiagonal","JumpPointFinder","getBoundingBoxes","nodePadding","roundTo","xMax","MIN_SAFE_INTEGER","yMax","MAX_SAFE_INTEGER","nodeBoxes","map","positionAbsolute","bottomLeft","topRight","id","graphPadding","abs","graphBox","getSmartEdge","options","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","drawEdge","generatePath","generatePathResult","graphPath","index","middlePoint","middleX","middleY","edgeCenterX","edgeCenterY","SmartEdge","edgeProps","style","label","labelStyle","labelShowBg","labelBgStyle","labelBgPadding","labelBgBorderRadius","markerEnd","markerStart","interactionWidth","smartResponse","FallbackEdge","fallback","BezierEdge","React","createElement","BaseEdge","labelX","labelY","BezierConfiguration","SmartBezierEdge","props","useNodes","StepConfiguration","StepEdge","SmartStepEdge","StraightConfiguration","StraightEdge","SmartStraightEdge"],"mappings":"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"}